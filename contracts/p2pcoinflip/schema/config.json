{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Config",
  "type": "object",
  "required": [
    "bet_liquidator_percent",
    "bet_responder_liquidation_percent",
    "blocks_for_responder_liquidation",
    "historical_bets_clear_batch_size",
    "historical_bets_max_storage_size",
    "max_bets_by_addr",
    "max_blocks_until_liquidation",
    "min_bet_amounts",
    "min_blocks_until_liquidation",
    "owner",
    "treasury",
    "treasury_liquidation_percent",
    "treasury_tax_percent"
  ],
  "properties": {
    "bet_liquidator_percent": {
      "type": "integer",
      "format": "uint8",
      "minimum": 0.0
    },
    "bet_responder_liquidation_percent": {
      "type": "integer",
      "format": "uint8",
      "minimum": 0.0
    },
    "blocks_for_responder_liquidation": {
      "type": "integer",
      "format": "uint64",
      "minimum": 0.0
    },
    "historical_bets_clear_batch_size": {
      "type": "integer",
      "format": "uint64",
      "minimum": 0.0
    },
    "historical_bets_max_storage_size": {
      "type": "integer",
      "format": "uint64",
      "minimum": 0.0
    },
    "max_bets_by_addr": {
      "type": "integer",
      "format": "uint64",
      "minimum": 0.0
    },
    "max_blocks_until_liquidation": {
      "type": "integer",
      "format": "uint64",
      "minimum": 0.0
    },
    "min_bet_amounts": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/CoinLimit"
      }
    },
    "min_blocks_until_liquidation": {
      "type": "integer",
      "format": "uint64",
      "minimum": 0.0
    },
    "owner": {
      "$ref": "#/definitions/CanonicalAddr"
    },
    "treasury": {
      "$ref": "#/definitions/CanonicalAddr"
    },
    "treasury_liquidation_percent": {
      "type": "integer",
      "format": "uint8",
      "minimum": 0.0
    },
    "treasury_tax_percent": {
      "type": "integer",
      "format": "uint8",
      "minimum": 0.0
    }
  },
  "definitions": {
    "Binary": {
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>",
      "type": "string"
    },
    "CanonicalAddr": {
      "$ref": "#/definitions/Binary"
    },
    "CoinLimit": {
      "type": "object",
      "required": [
        "denom",
        "min_amount"
      ],
      "properties": {
        "denom": {
          "type": "string"
        },
        "min_amount": {
          "$ref": "#/definitions/Uint128"
        }
      }
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
