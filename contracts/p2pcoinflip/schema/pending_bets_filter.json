{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "PendingBetsFilter",
  "type": "object",
  "required": [
    "skip",
    "sort_by"
  ],
  "properties": {
    "assets": {
      "type": [
        "array",
        "null"
      ],
      "items": {
        "$ref": "#/definitions/AssetFilter"
      }
    },
    "exclude_address": {
      "type": [
        "string",
        "null"
      ]
    },
    "limit": {
      "type": [
        "integer",
        "null"
      ],
      "format": "uint32",
      "minimum": 0.0
    },
    "liquidation": {
      "anyOf": [
        {
          "$ref": "#/definitions/LiquidationFilter"
        },
        {
          "type": "null"
        }
      ]
    },
    "skip": {
      "type": "integer",
      "format": "uint32",
      "minimum": 0.0
    },
    "sort_by": {
      "$ref": "#/definitions/PendingBetsSort"
    }
  },
  "definitions": {
    "AssetFilter": {
      "type": "object",
      "required": [
        "denom"
      ],
      "properties": {
        "bet_size_from": {
          "anyOf": [
            {
              "$ref": "#/definitions/Uint128"
            },
            {
              "type": "null"
            }
          ]
        },
        "bet_size_to": {
          "anyOf": [
            {
              "$ref": "#/definitions/Uint128"
            },
            {
              "type": "null"
            }
          ]
        },
        "denom": {
          "type": "string"
        }
      }
    },
    "LiquidationFilter": {
      "type": "object",
      "properties": {
        "blocks_until_liquidation_from": {
          "type": [
            "integer",
            "null"
          ],
          "format": "uint64",
          "minimum": 0.0
        },
        "blocks_until_liquidation_to": {
          "type": [
            "integer",
            "null"
          ],
          "format": "uint64",
          "minimum": 0.0
        }
      }
    },
    "PendingBetsSort": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "creation"
          ],
          "properties": {
            "creation": {
              "type": "object",
              "required": [
                "asc"
              ],
              "properties": {
                "asc": {
                  "type": "boolean"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "price"
          ],
          "properties": {
            "price": {
              "type": "object",
              "required": [
                "asc"
              ],
              "properties": {
                "asc": {
                  "type": "boolean"
                }
              }
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
