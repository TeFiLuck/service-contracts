{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "oneOf": [
    {
      "type": "object",
      "required": [
        "place_bet"
      ],
      "properties": {
        "place_bet": {
          "type": "object",
          "required": [
            "blocks_until_liquidation",
            "signature"
          ],
          "properties": {
            "blocks_until_liquidation": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "signature": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "respond_bet"
      ],
      "properties": {
        "respond_bet": {
          "type": "object",
          "required": [
            "bet_id",
            "bet_owner",
            "side"
          ],
          "properties": {
            "bet_id": {
              "type": "string"
            },
            "bet_owner": {
              "type": "string"
            },
            "side": {
              "type": "integer",
              "format": "uint8",
              "minimum": 0.0
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "resolve_bet"
      ],
      "properties": {
        "resolve_bet": {
          "type": "object",
          "required": [
            "bet_id",
            "passphrase"
          ],
          "properties": {
            "bet_id": {
              "type": "string"
            },
            "passphrase": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "liquidate_bet"
      ],
      "properties": {
        "liquidate_bet": {
          "type": "object",
          "required": [
            "bet_id"
          ],
          "properties": {
            "bet_id": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "withdraw_pending_bet"
      ],
      "properties": {
        "withdraw_pending_bet": {
          "type": "object",
          "required": [
            "bet_id"
          ],
          "properties": {
            "bet_id": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "update_config"
      ],
      "properties": {
        "update_config": {
          "type": "object",
          "properties": {
            "bet_liquidator_percent": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint8",
              "minimum": 0.0
            },
            "bet_responder_liquidation_percent": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint8",
              "minimum": 0.0
            },
            "blocks_for_responder_liquidation": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint64",
              "minimum": 0.0
            },
            "historical_bets_clear_batch_size": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint64",
              "minimum": 0.0
            },
            "historical_bets_max_storage_size": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint64",
              "minimum": 0.0
            },
            "max_bets_by_addr": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint64",
              "minimum": 0.0
            },
            "max_blocks_until_liquidation": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint64",
              "minimum": 0.0
            },
            "min_bet_amounts": {
              "type": [
                "array",
                "null"
              ],
              "items": {
                "$ref": "#/definitions/CoinLimit"
              }
            },
            "min_blocks_until_liquidation": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint64",
              "minimum": 0.0
            },
            "owner": {
              "type": [
                "string",
                "null"
              ]
            },
            "treasury": {
              "type": [
                "string",
                "null"
              ]
            },
            "treasury_liquidation_percent": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint8",
              "minimum": 0.0
            },
            "treasury_tax_percent": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint8",
              "minimum": 0.0
            }
          }
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "CoinLimit": {
      "type": "object",
      "required": [
        "denom",
        "min_amount"
      ],
      "properties": {
        "denom": {
          "type": "string"
        },
        "min_amount": {
          "$ref": "#/definitions/Uint128"
        }
      }
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
